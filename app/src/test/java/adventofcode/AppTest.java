/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package adventofcode;

import org.junit.jupiter.api.Test;

import com.google.common.collect.Lists;

import adventofcode.scraper.InputScraper;
import adventofcode.solutions.day1.Day1Part1;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.IOException;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class AppTest {
    @Test 
    void inputFileIsValid() {

        final String knownLine = "8eight1";
        try (Stream<String> input = InputScraper.getInput("2023", "1")) {
            String content = input.collect(Collectors.joining("\n"));
            assertTrue(content.contains(knownLine));
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }   
    }


    private String replaceNonInteger(String input) {
        return input.replaceAll("[a-z]", "");
    }

    private String getFirstAndLastDigit(String input) {
        return input.charAt(0) + "" + input.charAt(input.length() - 1);
    }

    @Test
    void replaceNonIntegerTest(){
        Stream<String> knownStream = Stream.of("1abc2","pqr3stu8vwx","a1b2c3d4e5f","treb7uchet");

        Stream<String> replacedStream = knownStream.map(this::replaceNonInteger);
        String content = replacedStream.collect(Collectors.joining(","));

        final String expectedString = "12,38,12345,7";

        assertEquals(expectedString, content);
    }

    @Test
    void getFirstAndLastDigitTest(){
        Stream<String> knownStream = Stream.of("12","38","12345","7");
        Stream<String> modifiedStream = knownStream.map(this::getFirstAndLastDigit);
        String content = modifiedStream.collect(Collectors.joining(","));

        final String expectedString = "12,38,15,77";

        assertEquals(expectedString, content);
    }


    @Test 
    void Day1ExampleTest() {
        final Integer knownAnswer = 142;

        Stream<String> input = Stream.of("1abc2","pqr3stu8vwx","a1b2c3d4e5f","treb7uchet");
        Integer sum = input.map(this::replaceNonInteger)
                .filter(s -> !s.isEmpty())
                .map(this::getFirstAndLastDigit)
                .mapToInt(Integer::parseInt)
                .sum();

        assertEquals(knownAnswer, sum);
    }



    @Test
    void summationIsValid() {

        final String knownString = "1abc2\r\n" + //
                "pqr3stu8vwx\r\n" + //
                "a1b2c3d4e5f\r\n" + //
                "treb7uchet";

        Stream<String> knownStream = knownString.chars().mapToObj(String::valueOf);
        final Integer knownAnswer = 77;

        try (Stream<String> input = InputScraper.getInput("2023", "1")) {
            Day1Part1 solution = new Day1Part1();
            assertEquals(knownAnswer, solution.solve(knownStream));
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }   
    }


}
